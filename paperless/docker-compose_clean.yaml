# docker-compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this docker-compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker-compose pull'.
# - Run 'docker-compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker-compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

version: "3.4"
services:
  broker:
    image: docker.io/library/redis:6.0
    restart: unless-stopped
    volumes:
      - ./redisdata:/data:Z
    networks:
      - paperless_backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:1.9
    restart: unless-stopped
    networks:
      - psql_backend
      - paperless_backend
      - paperless_frontend
    depends_on:
      # - psql
      - broker
      - gotenberg
      - tika
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./data:/usr/src/paperless/data:Z
      - ./media:/usr/src/paperless/media:Z
      - ./export:/usr/src/paperless/export:Z
      - ./consume:/usr/src/paperless/consume:Z
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: psql
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
      PAPERLESS_PORT: 80
      PAPERLESS_CONVERT_MEMORY_LIMIT: 32
      PAPERLESS_TIME_ZONE: Europe/Berlin
      PAPERLESS_URL: https://paperless.maxbachmann.de
      PAPERLESS_SECRET_KEY: <GENERATE KEY>
      # PAPERLESS_TRASH_DIR: “media/trash”
      PAPERLESS_DBPASS: '<GENERATE PASSWORD>'
      PAPERLESS_OCR_LANGUAGE: deu+eng
    labels:
      traefik.enable: true
      traefik.http.routers.paperless.rule: Host(`paperless.maxbachmann.de`)
      traefik.http.routers.paperless.entrypoints: websecure
      traefik.http.routers.paperless.tls.certresolver: netcup
      traefik.http.routers.paperless.middlewares: internal-network
      traefik.http.services.paperless.loadbalancer.server.port: 80
      traefik.docker.network: paperless_frontend

  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.4
    restart: unless-stopped
    command:
      - "gotenberg"
      - "--chromium-disable-routes=true"
    networks:
      - paperless_backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M

  tika:
    image: ghcr.io/paperless-ngx/tika
    restart: unless-stopped
    networks:
      - paperless_backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M

networks:
    psql_backend:
        external: true
    paperless_frontend:
        name: paperless_frontend
    paperless_backend:
        name: paperless_backend